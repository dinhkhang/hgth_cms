<?php
App::import('Service', 'ObliqueAnalytics');

/**
 * Created by PhpStorm.
 * User: huongnx
 * Date: 12/01/2016
 * Time: 13:50
 * @property mixed Region
 * @property mixed XienNumberLuck
 * @property mixed XienDateLuck
 */

class CronObliqueAnalyticsController extends AppController {

    public $uses = array('Region', 'XienNumberLuck', 'XienDateLuck');

    public function beforeFilter()
    {
        parent::beforeFilter(); // TODO: Change the autogenerated stub

        $this->Auth->allow();
    }

    /**
     * Crontab XIEN analytics
     */
    public function run()
    {
        $this->layout = false;
        $this->autoRender = false;
        $this->logAnyFile(sprintf('CRON START: %s', date('Y-m-d H:i:s')), __CLASS__.'_'.__FUNCTION__);
        $amplitudes = Configure::read('sysconfig.amplitudesOblique');
        $regions = $this->Region->find('list', array(
            'conditions' => array(
                'parent' => array(
                    '$ne' => null
                )
            ),
            'fields' => 'code'
        ));

        foreach ($regions as $region) {
            $xienDateLuck = array(
                'date' => (int)date('Ymd'),
                'region_code' => $region,
            );
            foreach ($amplitudes as $amplitude) {
                $oblique = new ObliqueAnalytics();
                $oblique->setAmplitudes($amplitude)
                        ->setRegion($region)
                        ->analytics();

                $results = $oblique->getResult();

                $xienDateLuck['type'] = $oblique->getType();
                $xienDateLuck['numbers'][$amplitude] = array();

                // Delete all old record
                $this->XienNumberLuck->deleteAll(array(
                    'date' => (int)date('Ymd'),
                    'region_code' => $region,
                    'type' => $oblique->getType(),
                    'span' => $amplitude
                ));

                foreach ($results as $pair => $dayOfPair) {
                    $pair = explode('_', $pair);
                    arsort($dayOfPair);

                    $xienDateLuck['numbers'][$amplitude][] = $pair;

                    $xienNumberData = array(
                        'date' => (int)date('Ymd'),
                        'region_code' => $region,
                        'type' => $oblique->getType(),
                        'span' => $oblique->getAmplitudes(),
                        'number' => $pair,
                        'lucky_dates' => $dayOfPair
                    );

                    $this->XienNumberLuck->create();
                    $this->XienNumberLuck->save($xienNumberData);
                }
            }

            // Save to xien_date_lucks collection
            krsort($xienDateLuck['numbers']);

            $xienDateLuckExists = $this->XienDateLuck->find('first', array(
                'conditions' => array(
                    'date' => (int)date('Ymd'),
                    'region_code' => $region,
                    'type' => $xienDateLuck['type']
                )
            ));

            if ($xienDateLuckExists) {
                $this->XienDateLuck->id = $xienDateLuckExists['XienDateLuck']['id'];
            } else {
                $this->XienDateLuck->create();
            }
            $this->XienDateLuck->save($xienDateLuck);
        }

        $this->logAnyFile(sprintf('CRON END: %s', date('Y-m-d H:i:s')), __CLASS__.'_'.__FUNCTION__);
    }
}